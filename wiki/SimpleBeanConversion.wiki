#summary Simple Bean Conversion

= Client and Service Bean = 
Let's take below client bean as follows.
{{{
public class ClientBean{
   private int id;
   private String name;
}
}}}

and Service Bean looks like
{{{
public class ServiceBean{
  private int id;
  private String name;
}
}}}

= Without xbean =
 Without xbean, we will convert service bean to client bean as follows.
{{{
  ClientBean clientBean = new ClientBean();
  clientBean.setId(serviceBean.getId());
  clientBean.setName(serviceBean.getName());
}}}

= With Bean Converter =
  Now, we are going to create xbean converter which converts service bean to client bean. We can create using new operator as 
{{{
 BeanConverter converter = new AnnotationBeanConverter();
}}}

 If you are using spring,We can inject via spring xml like
{{{
 <bean id="converter" class="com.xbean.converter.impl.AnnotationBeanConverter"/>
}}}

 Now, using this converter, we are going to convert a service bean to client bean without using any getters or setters as follows.
{{{
 ClientBean clientBean = converter.convert(ClientBean.class,serviceBean);
}}}
 Here,serviceBean parameter is instance of ServiceBean class.The above method returns clientBean object which contains respective values from serviceBean object.

= Logic of conversion =
 Internally, xbean uses reflection to do the conversion. First , it will traverse each and every field in client bean. It will try to get the field from service bean which has same name as client bean and assign the value from service bean to client bean.

= Questions =
 Wait Wait. We know you are asking lot of questions in your mind.
 What will happen if
 * property names are different?.
 * property types differ?
 * property is a List or Set or Collection?

Continue you to the next section.You will get answer one by one.
 * What 
  