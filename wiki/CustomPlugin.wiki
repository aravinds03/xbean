#summary How to write plugin.

= Introduction =
 Though, we provide all kind of flexibility in doing bean conversions, we know that we can't write code to support all kind of requirement's in this world. So we have provided you a way to do your own bean conversion.We call it as *Plugins*. The plugins are reusable 
 and shareable.

= When should i write plugin? =
 We see the following scenarios where you can write plugin.
 # If you don't want to convert static final variables?.
 # If you don't want to move "serialVersionUID" variable (from Serializable interface) to other beans?.
 # If you want to Ignore all the variable's that starts with underscore(__).

= How to write plugin =
 Let's consider the second scenario from the above section.
 I knew that , if i pass serialVersion id variable(need to be unique) to the client beans,then it will result in series consequences. So, we are going to write custom conversion(Note, this is not custom property converter). 
 **Custom Conversions* are generic and applicable to all the variables during bean conversion.
   You need to write your own [http://code.google.com/p/xbean/source/browse/trunk/src/main/java/com/googlecode/xbean/conversion/Conversion.java Conversion] implementation.
The Conversion interface:
{{{
public interface Conversion {
 boolean convert(SourceDetails sourceDetails,TargetDetails targetDetails)throws Exception;
}
}}}

  Now, we can write custom conversion to ignore serialVersion variable's as follows,
{{{
public class SerialVersionIgnoreConversion implements Conversion {
   private static final String SERIAL_VERSION_FIELD_NAME = "serialVersionUID";
   public boolean convert(SourceDetails sourceDetails, TargetDetails targetDetails) {
     return SERIAL_VERSION_FIELD_NAME.equals(targetDetails.getField().getName());
   }
}
}}}
  See the implementation [http://code.google.com/p/xbean/source/browse/trunk/src/main/java/com/googlecode/xbean/conversion/impl/SerialVersionIgnoreConversion.java here].
{{{
  Note: For convert method, return true, if you want to stop the conversion, or else false, to continue the bean conversion.
}}}

= How to use plugin =
  Integrating plugin with existing bean conversion is as easy as follows,
{{{
   List<Conversion> conversionList = new ArrayList<Conversion>();
   conversionList.add(new SerialVersionIgnoreConversion());
   annotationBeanConverter.setConversionList(conversionList);
   ....
   annotationBeanConverter.convert(beans...);
}}}

 If you are using spring, we can inject plugins(Custom Conversions) as follows,
{{{
   <bean id="beanConverter" class="com.googlecode.xbean.converter.impl.AnnotationBeanConverter">
        <property name="conversionList">
          <list>
                <ref bean="serialCustomConversion"/>
           </list>
        </property> 
   </bean>
   
   <bean id="serialCustomConversion" class="com.googlecode.xbean.conversion.impl.SerialVersionIgnoreConversion "/>
   
}}}